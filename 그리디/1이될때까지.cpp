/*
	1이 될 때까지 
	작성자: 성연재
	작성일: 2021.12.03
	작성언어: C++
	
	문제
	어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고한다.
	단, 두 번째 연산은 N이 K로 나누어떨어질 때만 선택할 수 있다.
	
	1. N에서 1을 뺀다.
	2. N을 K로 나눈다.
	
	예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에
	2번의 과정을 두 번 수행하면 N은 1이 된다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이된다.
	이는 N을 1로 만드는 최소 횟수이다.
	
	N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을
	작성하시오. 
	 
	 입력조건
	 1. 첫째 줄에 N(2 <= N <= 100,000)과 K(2 <= K <= 100,000)가 공백으로 구분되며 각각 자연수로 주어진다.
	 이때 입력으로 주지는 N은 항상 K보다 크거나 같다.  
	 
	 출력 조건 
	 1. 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야하는 횟수의 최솟값은 출력한다. 
	 
	 입력예시
	 25 5
	 
	 
	 출력예시
	 2
	  
*/

#include <bits/stdc++.h>

using namespace std;

int n, k;


int main(void)
{
	int count = 0;
	cin >> n >> k;
	while(true)
	{
		if(n == 1) break;
		if(n % k == 0) 
		{
			n = (n / k);
			count = count + 1;
		}
		else
		{
			n = n - 1;
			count = count + 1;
		}
	}
	
	cout << count;
} 
